
<h2 id="memory-usage">Memory Usage</h2>

<p><code>Hash</code> サイズごとのメモリー使用量 (<code>mrb_malloc</code> や <code>mrb_realloc</code> に実際に指定した値) の計測結果です (<code>struct RVALUE</code> のサイズは含みません)。</p>
**%=File.read(data_dir("memory-usage", "chart.html"))-%**
<p>ハッシュバケット拡大時のメモリー使用量の増加量が、New 実装は Baseline 実装と比較してかなり少なくハッシュバケットが小さいことが良く分かります。</p>

<p>boxing とハッシュテーブルの有無による関係は概ね以下のようになっています。</p>

<table><thead>
<tr>
<th style="text-align: center">boxing</th>
<th style="text-align: center">ハッシュテーブル</th>
<th style="text-align: center">メモリー使用量</th>
</tr>
</thead><tbody>
<tr>
<td style="text-align: center">あり</td>
<td style="text-align: center">なし</td>
<td style="text-align: center">0.55倍-0.75倍</td>
</tr>
<tr>
<td style="text-align: center">あり</td>
<td style="text-align: center">あり</td>
<td style="text-align: center">0.50倍-0.75倍</td>
</tr>
<tr>
<td style="text-align: center">なし</td>
<td style="text-align: center">なし</td>
<td style="text-align: center">0.70倍-0.95倍</td>
</tr>
<tr>
<td style="text-align: center">なし</td>
<td style="text-align: center">あり</td>
<td style="text-align: center">0.70倍-0.95倍</td>
</tr>
</tbody></table>

<p>boxing ありのほうが削減率が大きくなっています。これは、今回削減対象となっているハッシュバケットや管理情報のメモリー使用量が、<code>Hash</code> オブジェクト全体のメモリー使用量に対して割合が大きいためです。</p>

<p>なお、空のハッシュは <code>mrb_hash_new</code> で作成しているため、両実装とも初期メモリー使用量が0になっていますが、Baseline 実装では <code>Hash.new</code> や空のハッシュリテラルで作成した場合は0になりません。</p>
